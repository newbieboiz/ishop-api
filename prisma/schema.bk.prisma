// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp()
  name      String    @unique @db.VarChar(64)

  permissions Permission[]
  users       User[]
}

model Permission {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @db.Timestamp()
  action     String
  subject    String
  inverted   Boolean   @default(false)
  conditions Json?
  reason     String?
  roleId     String

  role Role @relation(fields: [roleId], references: [id])
}

model User {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime? @db.Timestamp()
  email              String    @unique @db.VarChar(254)
  emailVerified      DateTime?
  image              String?
  username           String    @unique @db.VarChar(64)
  password           String
  roleId             String
  isTwoFactorEnabled Boolean   @default(false)

  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  role                  Role                   @relation(fields: [roleId], references: [id])
  profile               Profile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Profile {
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  firstname String?  @db.VarChar(64)
  lastname  String?  @db.VarChar(64)
  telephone String?  @db.VarChar(12)
  avatar    String?
  bio       String?
  userId    String   @unique

  user User @relation(fields: [userId], references: [id])
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(256)
  userId    String

  billboards Billboard[]
  categories Category[]
  products   Product[]
  brands     Brand[]
  sizes      Size[]
  colors     Color[]
  orders     Order[]
}

model Billboard {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  label     String   @db.VarChar(256)
  imageUrl  String

  store Store @relation(fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  name      String   @db.VarChar(128)

  store    Store     @relation(fields: [storeId], references: [id])
  products Product[] @relation()

  @@index([storeId])
}

model Brand {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  name      String   @db.VarChar(64)
  value     String   @db.VarChar(64)

  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Size {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  name      String   @db.VarChar(64)
  value     String   @db.VarChar(64)

  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  name      String   @db.VarChar(64)
  value     String   @db.VarChar(64)

  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  url       String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Product {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamp()
  storeId     String
  categoryId  String
  brandId     String
  sizeId      String
  colorId     String
  name        String    @db.VarChar(256)
  description String?
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)

  images     Image[]
  store      Store       @relation(fields: [storeId], references: [id])
  category   Category    @relation(fields: [categoryId], references: [id])
  brand      Brand       @relation(fields: [brandId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  orderItems OrderItem[]
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  phone     String   @default("") @db.VarChar(12)
  address   String   @default("") @db.VarChar(256)
  isPaid    Boolean  @default(false)

  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
